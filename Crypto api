//crypto api fetched and search use different api with you own key

import React, { useEffect, useState } from "react";
import axios from "axios";

// Define the structure of the crypto data
interface Crypto {
  id: string;
  name: string;
  symbol: string;
  current_price: number;
  market_cap: number;
  total_volume: number;
}

const CryptoTracking: React.FC = () => {
  const [cryptoData, setCryptoData] = useState<Crypto[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [searchQuery, setSearchQuery] = useState<string>("");
  const [searchResults, setSearchResults] = useState<Crypto[]>([]);
  const [error, setError] = useState<string>("");

  // Fetch initial data (Top 10 cryptocurrencies)
  useEffect(() => {
    axios
      .get("https://api.coingecko.com/api/v3/coins/markets", {
        params: {
          vs_currency: "usd",
          order: "market_cap_desc",
          per_page: 10,
          page: 1,
          sparkline: false,
        },
      })
      .then((response) => {
        setCryptoData(response.data);
        setLoading(false);
      })
      .catch((error) => {
        setError("Error fetching data");
        setLoading(false);
      });
  }, []);

  // Search function to get data based on search query
  const handleSearch = () => {
    if (searchQuery.trim()) {
      setLoading(true);
      axios
        .get("https://api.coingecko.com/api/v3/search", {
          params: {
            query: searchQuery,
          },
        })
        .then((response) => {
          if (response.data.coins.length > 0) {
            const searchResults: Crypto[] = response.data.coins.map(
              (coin: any) => ({
                id: coin.id,
                name: coin.name,
                symbol: coin.symbol,
                current_price: coin.market_cap_usd || 0, // Some coins may not have USD data
                market_cap: coin.market_cap_usd || 0,
                total_volume: coin.total_volumes[0]?.volume || 0,
              })
            );
            setSearchResults(searchResults);
          } else {
            setSearchResults([]);
            setError("No results found");
          }
          setLoading(false);
        })
        .catch((error) => {
          setError("Error fetching search data");
          setLoading(false);
        });
    }
  };

  if (loading && !searchQuery) {
    return <div>Loading...</div>;
  }

  return (
    <div>
      <h1>Cryptocurrency Data</h1>

      {/* Search Section */}
      <div>
        <input
          type="text"
          placeholder="Search for a coin..."
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
        />
        <button onClick={handleSearch}>Search</button>
      </div>

      {/* Display error if no results */}
      {error && <div style={{ color: "red" }}>{error}</div>}

      {/* Table */}
      <table
        border="1"
        style={{ marginTop: "20px" }}
        className="table table-bordered"
      >
        <thead className="bg-dark text-white">
          <tr>
            <th>Name</th>
            <th>Symbol</th>
            <th>Price (USD)</th>
            <th>Market Cap</th>
            <th>Volume (24h)</th>
          </tr>
        </thead>
        <tbody>
          {/* If there is a search query, display search results */}
          {(searchQuery ? searchResults : cryptoData).map((crypto) => (
            <tr key={crypto.id}>
              <td>{crypto.name}</td>
              <td>{crypto.symbol}</td>
              <td>${crypto.current_price.toFixed(2)}</td>
              <td>{crypto.market_cap.toLocaleString()}</td>
              <td>{crypto.total_volume.toLocaleString()}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default CryptoTracking;
